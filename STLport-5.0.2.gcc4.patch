# patch STLport 5.0.2 so it builds under gcc 4.1
# $Id$
diff -ur STLport/build/lib/gcc.mak stlport/build/lib/gcc.mak
--- STLport/build/lib/gcc.mak	2005-12-23 07:06:22.000000000 -0800
+++ stlport/build/lib/gcc.mak	2006-06-24 13:31:10.000000000 -0700
@@ -8,7 +8,7 @@
 include ${SRCROOT}/Makefiles/top.mak
 
 ifeq ($(OSNAME),linux)
-DEFS += -D_STLP_REAL_LOCALE_IMPLEMENTED -D_GNU_SOURCE
+DEFS += -D_STLP_REAL_LOCALE_IMPLEMENTED -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64
 endif
 
 # options for build with boost support
diff -ur STLport/stlport/stl/_threads.h stlport/stlport/stl/_threads.h
--- STLport/stlport/stl/_threads.h	2005-10-16 00:50:04.000000000 -0700
+++ stlport/stlport/stl/_threads.h	2006-06-24 13:31:10.000000000 -0700
@@ -377,14 +377,15 @@
  */
 class _STLP_CLASS_DECLSPEC _Refcount_Base
 {
+protected:
   // The data member _M_ref_count
   volatile __stl_atomic_t _M_ref_count;
-
+private:
 # if !defined (_STLP_ATOMIC_EXCHANGE)
   _STLP_mutex _M_mutex;
 # endif
 
-  public:
+public:
   // Constructor
   _Refcount_Base(__stl_atomic_t __n) : _M_ref_count(__n) {}
 
diff -ur STLport/stlport/stl/type_manips.h stlport/stlport/stl/type_manips.h
--- STLport/stlport/stl/type_manips.h	2005-08-22 12:08:38.000000000 -0700
+++ stlport/stlport/stl/type_manips.h	2006-06-25 00:32:37.000000000 -0700
@@ -18,10 +18,22 @@
 #ifndef _STLP_TYPE_MANIPS_H
 #define _STLP_TYPE_MANIPS_H
 
+// g++ 4.0, 4.1, and 4.2 define their own struct __true_type and struct __false_type in global namespace:
+// use them to avoid ambiguities. 
+#if defined(__GNUC__) && (__GNUC__ == 4) && (__GNUC_MINOR__ <= 2)
+#define USE_NATIVE_TRUE_TYPE
+#include _STLP_NATIVE_CPP_C_HEADER(bits/cpp_type_traits.h)
+#endif
+
 _STLP_BEGIN_NAMESPACE
 
+#ifdef USE_NATIVE_TRUE_TYPE
+using ::__true_type;
+using ::__false_type;
+#else
 struct __true_type {};
 struct __false_type {};
+#endif
 
 //bool to type
 template <int _Is> struct __bool2type {
@@ -274,4 +286,6 @@
 
 _STLP_END_NAMESPACE
 
+#undef USE_NATIVE_TRUE_TYPE
+
 #endif /* _STLP_TYPE_MANIPS_H */
