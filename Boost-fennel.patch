diff -urN ../boost/boost/test/detail/global_typedef.hpp boost/boost/test/detail/global_typedef.hpp
--- ../boost/boost/test/detail/global_typedef.hpp	2008-10-13 01:20:26.000000000 -0700
+++ boost/boost/test/detail/global_typedef.hpp	2009-06-01 20:22:24.000000000 -0700
@@ -45,6 +45,7 @@
 //____________________________________________________________________________//
 
 typedef unsigned long   test_unit_id;
+
 const test_unit_id INV_TEST_UNIT_ID  = 0xFFFFFFFF;
 const test_unit_id MAX_TEST_CASE_ID  = 0xFFFFFFFE;
 const test_unit_id MIN_TEST_CASE_ID  = 0x00010000;
@@ -53,6 +54,8 @@
 
 //____________________________________________________________________________//
 
+namespace ut_detail {
+
 inline test_unit_type
 test_id_2_unit_type( test_unit_id id )
 {
@@ -61,6 +64,18 @@
 
 //____________________________________________________________________________//
 
+// helper templates to prevent ODR violations
+template<class T>
+struct static_constant {
+    static T value;
+};
+
+template<class T>
+T static_constant<T>::value;
+
+//____________________________________________________________________________//
+
+} // namespace ut_detail
 } // namespace unit_test
 
 } // namespace boost
diff -urN ../boost/boost/test/floating_point_comparison.hpp boost/boost/test/floating_point_comparison.hpp
--- ../boost/boost/test/floating_point_comparison.hpp	2008-10-13 01:20:26.000000000 -0700
+++ boost/boost/test/floating_point_comparison.hpp	2009-06-01 20:22:24.000000000 -0700
@@ -16,8 +16,9 @@
 #define BOOST_TEST_FLOATING_POINT_COMPARISON_HPP_071894GER
 
 #include <boost/limits.hpp>  // for std::numeric_limits
-
+// Boost.Test
+#include <boost/test/detail/global_typedef.hpp>
 #include <boost/test/utils/class_properties.hpp>
 
 #include <boost/test/detail/suppress_warnings.hpp>

@@ -79,12 +80,12 @@
 safe_fpt_division( FPT f1, FPT f2 )
 {
     // Avoid overflow.
-    if( f2 < static_cast<FPT>(1)  && f1 > f2*fpt_limits<FPT>::max_value() )
+    if( (f2 < static_cast<FPT>(1)  && f1 > f2*fpt_limits<FPT>::max_value()) )
         return fpt_limits<FPT>::max_value();
 
     // Avoid underflow.
-    if( f1 == static_cast<FPT>(0) ||
-        f2 > static_cast<FPT>(1) && f1 < f2*fpt_limits<FPT>::min_value() )
+    if( (f1 == static_cast<FPT>(0)) ||
+        (f2 > static_cast<FPT>(1) && f1 < f2*fpt_limits<FPT>::min_value()) )
         return static_cast<FPT>(0);
 
     return f1/f2;
@@ -221,7 +222,7 @@
 };
 
 namespace {
-check_is_close_t check_is_close;
+check_is_close_t const& check_is_close = unit_test::ut_detail::static_constant<check_is_close_t>::value;
 }
 
 //____________________________________________________________________________//
@@ -243,7 +244,7 @@
 };
 
 namespace {
-check_is_small_t check_is_small;
+check_is_small_t const& check_is_small = unit_test::ut_detail::static_constant<check_is_small_t>::value;
 }
 
 //____________________________________________________________________________//
diff -urN ../boost/boost/test/impl/framework.ipp boost/boost/test/impl/framework.ipp
--- ../boost/boost/test/impl/framework.ipp	2008-10-13 01:20:26.000000000 -0700
+++ boost/boost/test/impl/framework.ipp	2009-06-01 20:22:24.000000000 -0700
@@ -127,7 +127,7 @@
             test_unit_store::value_type const& tu = *m_test_units.begin();
 
             // the delete will erase this element from map
-            if( test_id_2_unit_type( tu.second->p_id ) == tut_suite )
+            if( ut_detail::test_id_2_unit_type( tu.second->p_id ) == tut_suite )
                 delete  (test_suite const*)tu.second;
             else
                 delete  (test_case const*)tu.second;
diff -urN ../boost/boost/test/impl/unit_test_suite.ipp boost/boost/test/impl/unit_test_suite.ipp
--- ../boost/boost/test/impl/unit_test_suite.ipp	2008-10-13 01:20:26.000000000 -0700
+++ boost/boost/test/impl/unit_test_suite.ipp	2009-06-01 20:22:24.000000000 -0700
@@ -173,7 +173,7 @@
 test_suite::get( const_string tu_name ) const
 {
     BOOST_TEST_FOREACH( test_unit_id, id, m_members ) {
-        if( tu_name == framework::get( id, test_id_2_unit_type( id ) ).p_name.get() )
+        if( tu_name == framework::get( id, ut_detail::test_id_2_unit_type( id ) ).p_name.get() )
             return id;
     }
 
@@ -228,7 +228,7 @@
 void
 traverse_test_tree( test_unit_id id, test_tree_visitor& V )
 {
-    if( test_id_2_unit_type( id ) == tut_case )
+    if( ut_detail::test_id_2_unit_type( id ) == tut_case )
         traverse_test_tree( framework::get<test_case>( id ), V );
     else
         traverse_test_tree( framework::get<test_suite>( id ), V );
diff -urN ../boost/boost/test/parameterized_test.hpp boost/boost/test/parameterized_test.hpp
--- ../boost/boost/test/parameterized_test.hpp	2008-10-13 01:20:26.000000000 -0700
+++ boost/boost/test/parameterized_test.hpp	2009-06-01 20:22:24.000000000 -0700
@@ -82,8 +82,8 @@
     , m_par_end( par_end )
     {}
 
-    test_unit* next() const
+    virtual test_unit* next() const
     {
         if( m_par_begin == m_par_end )
             return (test_unit*)0;

diff -urN ../boost/boost/test/unit_test_suite_impl.hpp boost/boost/test/unit_test_suite_impl.hpp
--- ../boost/boost/test/unit_test_suite_impl.hpp	2008-10-13 01:20:26.000000000 -0700
+++ boost/boost/test/unit_test_suite_impl.hpp	2009-06-01 20:22:24.000000000 -0700
@@ -72,7 +72,7 @@
     void                                increase_exp_fail( unsigned num );
 
 protected:
-    ~test_unit();
+    virtual ~test_unit();
 
 private:
     // Data members
diff -urN ../boost/boost/functional/hash/detail/float_functions.hpp boost/boost/functional/hash/detail/float_functions.hpp
--- ../boost/boost/functional/hash/detail/float_functions.hpp	2008-11-20 14:53:20.000000000 -0800
+++ boost-patched/boost/functional/hash/detail/float_functions.hpp	2009-12-03 21:39:44.000000000 -0800
@@ -82,6 +82,12 @@
 #  define BOOST_HASH_USE_OVERLOAD_FLOAT_FUNCS
 #endif
 
+#ifdef __APPLE__
+# define BOOST_HASH_USE_C99_FLOAT_FUNCS
+# undef BOOST_HASH_USE_OVERLOAD_FLOAT_FUNCS
+#endif
+
+
 namespace boost
 {
     namespace hash_detail
diff -ur boost/boost/functional/hash/detail/hash_float.hpp boost-patched/boost/functional/hash/detail/hash_float.hpp
--- boost/boost/functional/hash/detail/hash_float.hpp	2008-11-20 14:53:20.000000000 -0800
+++ boost-patched/boost/functional/hash/detail/hash_float.hpp	2009-12-03 21:38:19.000000000 -0800
@@ -30,6 +30,10 @@
 
 // Select implementation for the current platform.
 
+#ifdef __APPLE__
+# define BOOST_HASH_USE_x86_BINARY_HASH
+#endif
+
 // Cygwn
 #if defined(__CYGWIN__)
 #  if defined(__i386__) || defined(_M_IX86)
